require('dotenv').config();
const fs = require('fs');
const express = require('express');
const fetch = require('node-fetch');
const { 
  Client, 
  GatewayIntentBits, 
  REST, 
  Routes, 
  SlashCommandBuilder,
  Collection
} = require('discord.js');

// Environment variables
const token = process.env.TOKEN;
const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID;
const selfURL = process.env.SELF_URL || 'https://milkbreadbot.onrender.com';
const port = process.env.PORT || 10000;

// Load data once on startup
const coachData = JSON.parse(fs.readFileSync('coach.json', 'utf8'));
const attributeData = JSON.parse(fs.readFileSync('coach_attributes.json', 'utf8'));

// Setup Express server to keep the bot alive
const app = express();
app.get('/', (req, res) => res.send('Bot is alive!'));
app.listen(port, () => console.log(`üåê Server running on port: ${port}`));

// Self ping to prevent Render from sleeping
const pingInterval = 5 * 60 * 1000; // 5 minutes
const keepAlive = () => {
  fetch(selfURL)
    .then(() => console.log(`üîÅ Successfully pinged ${selfURL}`))
    .catch(err => console.error('‚ö†Ô∏è Self-ping failed:', err));
};

setInterval(keepAlive, pingInterval);

// Define slash commands
const commands = [
  new SlashCommandBuilder()
    .setName('ÁâõÂ•∂È∫µÂåÖ')
    .setDescription('Ë∂ÖÂ•ΩÂêÉÁöÑÂ≤©Ê≥âÁâõÂ•∂È∫µÂåÖÂúñÁâá'),
  new SlashCommandBuilder()
    .setName('Êü•Ë©¢')
    .setDescription('‰æùÂ±¨ÊÄßÊü•Ë©¢ÊïôÁ∑¥')
    .addStringOption(option =>
      option.setName('Â±¨ÊÄß')
        .setDescription('ÈÅ∏ÊìáÂ±¨ÊÄß')
        .setRequired(true)
        .addChoices(
          { name: 'Êô∫Âäõ', value: 'Êô∫Âäõ' },
          { name: 'Êâ£ÁêÉ', value: 'Êâ£ÁêÉ' },
          { name: 'ÂΩàË∑≥', value: 'ÂΩàË∑≥' },
          { name: 'ÂøÉÁêÜ', value: 'ÂøÉÁêÜ' },
          { name: 'ÈÄüÂ∫¶', value: 'ÈÄüÂ∫¶' },
          { name: 'ÊããÁêÉ', value: 'ÊããÁêÉ' },
          { name: 'Êé•ÁêÉ', value: 'Êé•ÁêÉ' },
          { name: 'ÊîîÁ∂≤', value: 'ÊîîÁ∂≤' }
        )
    )
].map(command => command.toJSON());

// Initialize Discord client
const client = new Client({
  intents: [GatewayIntentBits.Guilds]
});

// Create command handlers
const commandHandlers = {
  'ÁâõÂ•∂È∫µÂåÖ': async (interaction) => {
    await interaction.reply({
      content: 'ü•õüçû Â∞èÂ≤©‰Ω†Ë¶Å‰∏çË¶ÅÔºÅ',
      files: ['./milkbread.png']
    });
  },
  'Êü•Ë©¢': async (interaction) => {
    const attr = interaction.options.getString('Â±¨ÊÄß');
    const result = attributeData[attr];
    
    if (result?.length) {
      await interaction.reply(`üîç **${attr}** Â±¨ÊÄßÁöÑÊïôÁ∑¥Ôºö\n\n${result.join('\n')}`);
    } else {
      await interaction.reply(`‚ùå Ê≤íÊúâÊâæÂà∞Â±¨ÊÄß„Äå${attr}„ÄçÂ∞çÊáâÁöÑÊïôÁ∑¥„ÄÇ`);
    }
  }
};

// Register commands
async function registerCommands() {
  try {
    console.log('üì° Registering slash commands...');
    const rest = new REST({ version: '10' }).setToken(token);
    await rest.put(
      Routes.applicationGuildCommands(clientId, guildId),
      { body: commands }
    );
    console.log('‚úÖ Slash commands registered successfully!');
  } catch (error) {
    console.error('‚ùå Command registration failed:', error);
  }
}

// Handle interactions
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isChatInputCommand()) return;
  
  const handler = commandHandlers[interaction.commandName];
  if (handler) {
    try {
      await handler(interaction);
    } catch (error) {
      console.error(`‚ùå Error handling command ${interaction.commandName}:`, error);
      await interaction.reply({ 
        content: '‚ùå Êåá‰ª§Âü∑Ë°åÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ', 
        ephemeral: true 
      }).catch(() => {});
    }
  }
});

// Bot initialization
client.once('ready', () => {
  console.log(`ü§ñ Bot online! Logged in as ${client.user.tag}`);
  registerCommands();
});

// Global error handling
process.on('unhandledRejection', err => {
  console.error('‚ùå Unhandled Rejection:', err);
});

process.on('uncaughtException', err => {
  console.error('‚ùå Uncaught Exception:', err);
});

// Login
client.login(token);